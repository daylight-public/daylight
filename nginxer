#! /usr/bin/env bash

# This is one of the weirder scripts I've written.
#
# It makes use of a useful-but-weird bash idiom: rather than
# burden a script with dependencies on a number of support files,
# this script keeps the content of support files locally via 
# heredocs, and then it cats the heredocs into tmp files. For 
# lack of a better term this will be called 'catdoccing'
#
# It also uses gomplate, a golang template langage-based utility,
# to transform an nginx unit file template into an nginx unit file
# for a specific domain and port. This is the actual point of the
# script.
#
# With this idiom in hand, here's how this script works ...
# - catdoc an nginx unit file template, to represent proxying a domain
#   to a locally running service, with doman and port in envvars
# - catdoc a one-liner that runs gomplate against the template file
# - catdoc a Dockerfile based on gomplate, since most systems will
# - not have gomplate installed, and we don't want to install it.
# - docker build an image from the Dockerfile
# - docker run an instance, using the domain and host as envvars
#
# The result is a nice, domain+port specific nginx unit file streamed to stdout.
# 
# Useful. And ... a little weird.

main ()
{
        mkdir -p ./tmp
        local nginxCfgPath; nginxCfgPath=$(mktemp --tmpdir=./tmp/ nginx.cfg.tmpl.XXXXXX) || return
        printf '%s' "$nginxCfgPath" >&2
        cat >"$nginxCfgPath" <<- 'EOT_nginx_cfg'
server {
        listen 80;
        listen [::]:80;
        server_name {{.Env.domain}};
        root /www/{{.Env.domain}};
        location /
        {
                include proxy_params;
                proxy_pass http://localhost:{{.Env.port}};
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  Host $http_host;
        }
}
EOT_nginx_cfg

        local doNginxPath; doNginxPath=$(mktemp --tmpdir=./tmp/ do-nginx.sh.XXXXXX) || return
        printf '%s' "$doNginxPath" >&2
        cat >"$doNginxPath" <<- EOT_do_nginx
gomplate --file /nginx.service.tmpl 
EOT_do_nginx
        chmod 777 "$doNginxPath"

        local dockerfilePath; dockerfilePath=$(mktemp --tmpdir=./tmp/ Dockerfile.XXXXXX) || return
        printf '%s' "$dockerfilePath" >&2
        cat >"$dockerfilePath" <<- EOT_Dockerfile
FROM docker.io/alpine:latest as gomplating
COPY --from=docker.io/hairyhenderson/gomplate:stable /gomplate /bin/gomplate
COPY "$doNginxPath" /do-nginx.sh
COPY "$nginxCfgPath" /nginx.service.tmpl
ENTRYPOINT /do-nginx.sh
EOT_Dockerfile

        docker build \
                --tag nginxer \
                --file "$dockerfilePath" \
                . \
                1>&2

        docker run \
                --name gomplator \
                --env-file <( env| cut -f1 -d= ) \
                --rm -it \
                nginxer
}       

main "$@"
