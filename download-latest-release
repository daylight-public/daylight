 #! /usr/bin/env bash

set -ux

# github-curl ()
# {
    # # parse github args
    # local -A argmap=()
    # local nargs=0
    # github-parse-args argmap nargs "$@"
    # shift "$nargs"
    # # shellcheck disable=SC2016
    # (( $# >= 1 && $# <= 2 )) || { printf 'Usage: github-curl [flags] $urlPath [$urlBase]\n' >&2; return 1; }
    # local urlPath=${1##/} # Trim leading slash if necessary
    # local urlBase=${2:-'https://api.github.com'}

    # # Set headers to flag values or default
    # local acceptDefault='application/vnd.github+json'
    # local accept=${argmap[accept]:-$acceptDefault}
    # local outputDefault='-'
    # local output=${argmap[output]:-$outputDefault}
    # # Set url and token, if present
    # local url="$urlBase/$urlPath"
    # # Can't really parameterize on token -- we need separate curl calls for with token, and without
    # local -a flags=(--fail-with-body --location --silent)
    # flags+=(--header "Accept: $accept")
    # flags+=(--output "$output")
    # [[ -v argmap[token] ]] && flags+=(--header "Authorization: Token ${argmap[token]}")
    # curl "${flags[@]}" "$url" \
        # || { printf 'curl failed inside github-curl\n' >&2; return 1; }
# }

# github-parse-args ()
# {
    # # shellcheck disable=SC2016
    # (( $# >= 2 )) || { printf 'Usage: github-parse-args infovar nargs [$args]\n' >&2; return 1; }
    # # shellcheck disable=SC2178
    # [[ $1 != argmap ]] && { local -n argmap; argmap=$1; }
    # # Check that argmap is either an assoc array or a nameref to an assoc array
    # [[ $(declare -p argmap 2>/dev/null) == "declare -A"* ]] \
    # || [[ $(declare -p "${!argmap}" 2>/dev/null) == "declare -A"* ]] \
    # || { printf "%s is not an associative array, and it's not a nameref to an associative array either\n" "argmap" >&2; return 1; }
    # # shellcheck disable=SC2178
    # [[ $2 != nargs ]] && { local -n nargs; nargs=$2; }

    # nargs=0
    # shift 2
    # (( $# > 0 )) || return
    # while :; do
        # case $1 in
            # '--accept')
                # (( $# >= 2 )) || { printf -- '--accept specified but no accept provided.\n' >&2; return 1; }
                # argmap[accept]=$2
                # ((nargs+=2))
                # shift 2
                # ;;
            # '--output')
                # (( $# >= 2 )) || { printf -- '--output specified but no output provided.\n' >&2; return 1; }
                # argmap[output]=$2
                # ((nargs+=2))
                # shift 2
                # ;;
            # '--token')
                # (( $# >= 2 )) || { printf -- '--token specified but no token provided.\n' >&2; return 1; }
                # argmap[token]=$2
                # ((nargs+=2))
                # shift 2
                # ;;
            # '--')
                # shift
                # ((nargs++))
                # break
                # ;;
            # *)
                # break
                # ;;
        # esac
    # done
# }


# github-release-download-latest ()
# {
    # # parse github args
    # local -A argmap=()
    # local nargs=0
    # github-parse-args argmap nargs "$@" || return
    # shift "$nargs"
    # # shellcheck disable=SC2016
    # (( $# == 4 )) || { printf 'Usage: download-latest-release $org $repo $name $downloadFolder\n' >&2; return 1; }
    # local org=$1
    # local repo=$2
    # local name=$3
    # local downloadFolder=${4%%/}

    # # Get release info
    # local -a flags=()
    # [[ -v argmap[token] ]] && flags+=(--token "${argmap[token]}")
    # local -A releaseInfo
    # github-release-get-package-info "${flags[@]}" releaseInfo "$org" "$repo" "$name" || return
    # declare -p releaseInfo
    # # download release file using releaseInfo data
    # local urlPath=${releaseInfo[urlPath]}
    # local filename=${releaseInfo[filename]}
    # local accept='Accept: application/octet-stream'
    # local output="$downloadFolder/$filename"
    # flags+=(--accept "$accept" --output "$output")
    # github-curl "${flags[@]}" "$urlPath" || return
    # printf '%s' "$output"
# }


# github-release-get-data ()
# {
    # # parse github args
    # local -A argmap=()
    # local nargs=0
    # github-parse-args argmap nargs "$@"
    # shift "$nargs"
    # # shellcheck disable=SC2016
    # { (( $# >= 2 )) && (( $# <= 4 )); } || { printf 'Usage: github-release-get-data [flags] $org $repo [$releaseTag [$platform]]\n' >&2; return 1; }
    # local org=$1
    # local repo=$2
    # local tag=${3:-""}
    
    # local urlPath; urlPath="$(github-release-create-url-path "$org" "$repo" "$tag")" || return
    # # build argstring for github-curl
    # local -a flags=()
    # [[ -v argmap[token] ]] && flags+=(--token "${argmap[token]}")
    # github-curl "${flags[@]}" "$urlPath" || return
# }


# github-release-get-package-data ()
# {
    # # parse github args
    # local -A argmap=()
    # local nargs=0
    # github-parse-args argmap nargs "$@" || return
    # shift "$nargs"
    # # shellcheck disable=SC2016
    # (( $# == 3 )) || { printf 'Usage: github-release-get-package-data $org $repo $name\n' >&2; return 1; }
    # local org=$1
    # local repo=$2
    # local name=$3

    # local -a flags=()
    # [[ -v argmap[token] ]] && flags+=(--token "${argmap[token]}")
    # local urlPath; urlPath="$(github-release-create-url-path "$org" "$repo")" || return
    # local tmpCurl; tmpCurl=$(mktemp --tmpdir curl.release.XXXXXX) || return
    # github-curl "${flags[@]}" "$urlPath" >"$tmpCurl" || return
    # jq -r --arg name "$name" \
       # '.assets[]
        # | select(.name == $name)' \
      # </"$tmpCurl" \
      # || return 
# }


# github-release-get-package-info ()
# {
    # # parse github args
    # local -A argmap=()
    # local nargs=0
    # github-parse-args argmap nargs "$@" || return
    # shift "$nargs"
    # # shellcheck disable=SC2016
    # (( $# == 4 )) || { printf 'Usage: github-get-release-package-info infovar $org $repo $name\n' >&2; return 1; }
    # # shellcheck disable=SC2178
    # [[ $1 != info ]] && { local -n info; info=$1; }
    # local org=$2
    # local repo=$3
    # local name=$4

    # # Call github-release-get-package-data and create/parse the necesary fields
    # local -a flags=()
    # [[ -v argmap[token] ]] && flags+=(--token "${argmap[token]}")
    # local -a fields=()
    # read -r -a fields < <(github-release-get-package-data "${flags[@]}" "$org" "$repo" "$releaseName" \
    # | jq -r '
        # [.browser_download_url,
         # .content_type,
         # (.browser_download_url | match(".*/(.*)").captures[0].string),
         # .id,
         # .name,
         # .url,
         # (.url | match("https://api.github.com/(.*)").captures[0].string)
        # ] | @tsv' \
      # || return)
    # # Package fields into the info assoc array
    # info[browser_download_url]=${fields[0]}
    # info[content_type]=${fields[1]}
    # info[filename]=${fields[2]}
    # info[id]=${fields[3]}
    # info[name]=${fields[4]}
    # info[url]=${fields[5]}
    # info[urlPath]=${fields[6]}
# }


# github-release-list ()
# {
	# # parse github args
	# local -A argmap=()
	# local nargs=0
	# github-parse-args argmap nargs "$@"
	# shift "$nargs"
	# # shellcheck disable=SC2016
	# (( $# == 2 )) || { printf 'Usage: github-release-list [flags] $org $repo\n' >&2; return 1; }
	# local org=$1
	# local repo=$2

	# # get release name list, using token if provided
    # local -a flags=()
	# [[ -v argmap[token] ]] && flags+=(--token "${argmap[token]}")
	# github-release-get-data "${flags[@]}" "$org" "$repo" \
	# | jq -r '[.assets[].name] | sort | @tsv' \
	# || return

# }


# github-release-select ()
# {
    # # parse github args
    # local -A argmap=()
    # local nargs=0
    # github-parse-args argmap nargs "$@" || return
    # shift "$nargs"
	# # shellcheck disable=SC2016
	# (( $# == 3 )) || { printf 'Usage: github-release-select [flags] name $org $repo\n' >&2; return 1; }
	# [[ $1 != 'name' ]] && local -n name=$1
	# local org=$2
	# local repo=$3

    # local -a flags=()
    # [[ -v argmap[token] ]] && flags+=(--token "${argmap[token]}")
	# IFS=$'\t' read -r -a names < <(github-release-list "${flags[@]}" "$org" "$repo") || return
	# select name in "${names[@]}"; do break; done
# }

main ()
{
    source "./daylight.sh" || return
	
    # parse github args
    local -A argmap=()
    local nargs=0
    github-parse-args argmap nargs "$@" || return
    shift "$nargs"
    # shellcheck disable=SC2016
    (( $# == 2 )) || { printf 'Usage: download-latest-release $org $repo\n' >&2; return 1; }
    local org=$1
    local repo=$2

    # Get release name
    local -a flags
    [[ -v argmap[token] ]] && flags+=(--token "${argmap[token]}")
    local releaseName
	github-release-select "${flags[@]}" releaseName "$org" "$repo" || return
	declare -p releaseName
    # download release
    github-release-download-latest "${flags[@]}" "$org" "$repo" "$releaseName" /tmp/ || return
}

(return 0 2>/dev/null) || main "$@"
